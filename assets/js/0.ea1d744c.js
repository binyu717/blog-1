(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{160:function(e,t,r){"use strict";r.r(t);var i=r(0),n=Object(i.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[e._m(0),e._m(1),r("ul",[r("li",[r("a",{attrs:{href:"http://cn.vuejs.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网"),r("OutboundLink")],1),e._v(";")]),r("li",[r("a",{attrs:{href:"https://router.vuejs.org/zh/guide/#html",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-router"),r("OutboundLink")],1),e._v(";")]),r("li",[r("a",{attrs:{href:"https://vuex.vuejs.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("vuex"),r("OutboundLink")],1),e._v(";")]),r("li",[r("a",{attrs:{href:"https://github.com/opendigg/awesome-github-vue",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue开源项目"),r("OutboundLink")],1),e._v(";")]),r("li",[r("a",{attrs:{href:"https://github.com/youngwind/blog",target:"_blank",rel:"noopener noreferrer"}},[e._v("梁少峰Vue源码解析"),r("OutboundLink")],1),e._v(";")]),r("li",[r("a",{attrs:{href:"https://github.com/DDFE/DDFE-blog",target:"_blank",rel:"noopener noreferrer"}},[e._v("滴滴Vue源码解析"),r("OutboundLink")],1),e._v(";")]),r("li",[r("a",{attrs:{href:"https://ustbhuangyi.github.io/vue-analysis/",target:"_blank",rel:"noopener noreferrer"}},[e._v("滴滴vue技术揭秘"),r("OutboundLink")],1),e._v(";")]),r("li",[r("a",{attrs:{href:"http://www.cnblogs.com/xuntu/p/6800547.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue虚拟DOM"),r("OutboundLink")],1),e._v(";")]),r("li",[r("a",{attrs:{href:"https://github.com/wangfupeng1988/learn-vue2-mvvm",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue2的MVVM"),r("OutboundLink")],1),e._v(";")]),r("li",[r("a",{attrs:{href:"https://juejin.im/post/5a8e3f00f265da4e747fc700",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-cli多页面打包配置"),r("OutboundLink")],1),e._v(";")])]),e._m(2),e._m(3),e._m(4),e._m(5),e._m(6),e._m(7),e._m(8),e._m(9),e._m(10),e._m(11),e._m(12),e._m(13),e._m(14),e._m(15),e._m(16),e._m(17),e._m(18),e._m(19),e._m(20),e._m(21),e._m(22),e._m(23),e._m(24),e._m(25),e._m(26),e._m(27),e._m(28),e._m(29),e._m(30),e._m(31),e._m(32),e._m(33),e._m(34),e._m(35),e._m(36),e._m(37),e._m(38),e._m(39),e._m(40),e._m(41),e._m(42),e._m(43),e._m(44),e._m(45),e._m(46)])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"推荐"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#推荐","aria-hidden":"true"}},[this._v("#")]),this._v(" 推荐")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文档","aria-hidden":"true"}},[this._v("#")]),this._v(" 文档")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介","aria-hidden":"true"}},[this._v("#")]),this._v(" 简介")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"vue（读音同view）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue（读音同view）","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue（读音同view）")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("概念：聚焦View层，基于数据驱动和组件化理念的Web MVVM库;")]),t("li",[this._v("优点：轻量（体积小、不依赖其它库）、数据绑定、指令（同Angular理念）、组件化和虚拟dom（同React理念）;")]),t("li",[this._v("渐进式技术栈：学习坡度平缓，语法亲和力强，项目既可以只使用vue核心（视图和组件），也可以使用vue生态圈（vue-router、vuex等）技术构建中型项目，相比angular这种体系大、规范强硬的框架上手会更快;")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"vue和其它同类框架的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue和其它同类框架的区别","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue和其它同类框架的区别")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("与Angular：\n"),t("ul",[t("li",[this._v("相同：指令、过滤器、双向绑定、不支持低端浏览器;")]),t("li",[this._v("不同：ng学习成本高（比如：依赖注入机制...），Vue的API等比较简单直观，ng对数据赃检查所以watcher越多越慢，Vue使用异步队列更新（所有数据独立触发）所以优化比较好;")])])]),t("li",[this._v("与React：\n"),t("ul",[t("li",[this._v("相同：思想相同（一切都是组件），钩子函数（让开发者定制化处理需求），不内置类似Ajax、Router等功能到核心包，而是以其它方式加载组件开发中，都支持mixins特性;")]),t("li",[this._v("不同：React依赖虚拟DOM，对渲染的结果会做脏检查，而Vue使用DOM模版，Vue提供了指令、过滤器等可以方便快捷的操作DOM;")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"常用api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用api","aria-hidden":"true"}},[this._v("#")]),this._v(" 常用api")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 属性")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("el: vue实例挂载目标，用于vue编译模版，数据和事件监听的覆盖范围;")]),t("li",[this._v("data：用于vue初始化监听的数据对象，需要手动触发后续改动;")]),t("li",[this._v("computed: 用于vue初始化时混入实例的计算属性，只有当计算属性依赖的其它响应式属性改变才会更新，否则会取缓存数据，计算属性不能手动被改变;")]),t("li",[this._v("watch：用于vue初始化时，定义需要观察的表达式，当观察属性变化时触发回掉，可利用此观察属性来更新其它变量;")]),t("li",[this._v("methods: 初始化混入到vue实例中的方法，需要手动调用;")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"常用指令和特殊属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用指令和特殊属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 常用指令和特殊属性")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("v-html、v-show、v-if、v-else、v-else-if、v-for、v-on（@）、v-bind（:）、v-model;")]),t("li",[this._v("key、ref、slot、slot-scope;")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件","aria-hidden":"true"}},[this._v("#")]),this._v(" 组件")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ul",[r("li",[e._v("作用：用于拆分项目，减少项目代码，封装可复用组件，便于维护，使项目结构清晰;")]),r("li",[e._v("注意：组件data必须是函数（函数返回的对象是新生成的可被独立维护的对象，不会和其它实例共享避免互相影响）;")]),r("li",[e._v("组件间的交互方式：父子间通过"),r("code",[e._v("props")]),e._v("和"),r("code",[e._v("$emit")]),e._v("传递数据，非父子组件间通过"),r("code",[e._v("vm.$on")]),e._v("和"),r("code",[e._v("vm.$emit")]),e._v("传递数据;")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"slot"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#slot","aria-hidden":"true"}},[this._v("#")]),this._v(" slot")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("作用：用于组件内容分发（自定义内容）;")]),t("li",[this._v("种类：\n"),t("ul",[t("li",[this._v("基本slot（完全代理内容分发）;")]),t("li",[this._v("具名slot（指定位置内容分发）;")]),t("li",[this._v("作用域slot（解构 slot-scope 获取组件内数据）;")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"vue-set和vm-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-set和vm-set","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue.set和vm.$set")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("作用：用于vue初始化后，需要新增的响应式属性（被监听，且视图更新），因为vue本身无法监听普通的深度新增属性（对象和数组）;")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"vue-nexttick和vm-nexttick"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-nexttick和vm-nexttick","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue.nextTick和vm.$nextTick")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("作用：下一次的 dom 更新事件循环完成后触发回调，可用于需要在数据更新后，获取dom最新的真实状态（例如列表数据更新后需要获取更新后列表容器的实际高度）的场景;")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"vue-router"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-router","aria-hidden":"true"}},[this._v("#")]),this._v(" vue-router")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("作用：用于单页面应用无刷新页面跳转;")]),t("li",[this._v("基本配置：熟悉 path、name、components、children、redirect 配置的作用;")]),t("li",[this._v("标签使用：熟悉 router-link 和 router-view 常用配置;")]),t("li",[this._v("js功能：熟悉路由周期函数（beforeRouteEnter、beforeRouteLeave），熟悉$router api;")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"vuex（项目内部通过store、-store访问）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vuex（项目内部通过store、-store访问）","aria-hidden":"true"}},[this._v("#")]),this._v(" vuex（项目内部通过store、$store访问）")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("作用：一个 vue 应用的全局状态管理系统，方便应用中所有组件都能快速获取全局的状态改变，而不需要通过组件之间一层层传递;")]),t("li",[this._v("api：\n"),t("ul",[t("li",[this._v("state：单纯的数据状态数据存储对象;")]),t("li",[this._v("getters：需要动态计算的状态数据;")]),t("li",[this._v("mutations：用于改变state状态的唯一提交方法，只支持同步;")]),t("li",[this._v("actions：用于提交mutation，支持异步;")]),t("li",[this._v("modules：用于将大型应用store分割成子模块，便于模块内部管理自己的状态;")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"项目构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目构建","aria-hidden":"true"}},[this._v("#")]),this._v(" 项目构建")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"runtime-only-和-runtime-compiler区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#runtime-only-和-runtime-compiler区别","aria-hidden":"true"}},[this._v("#")]),this._v(" runtime only 和 runtime + compiler区别")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("runtime only：vue渲染最终通过render，选择此模式只能通过render函数渲染vue页面，不能采用template，因为template需要编译，而通常vue文件是通过vue-loader进行编译的，但是在main.js中new Vue时必须采用render，此方式生成的代码更轻量，因为没有加入编译过程代码;")]),t("li",[this._v("runtime + compiler：自带编译器，但是编译过程消耗资源和性能，所以通常推荐采用 runtime only 模式;")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"原理-2-5-16"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理-2-5-16","aria-hidden":"true"}},[this._v("#")]),this._v(" 原理(2.5.16)")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"vue入口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue入口","aria-hidden":"true"}},[this._v("#")]),this._v(" vue入口")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ul",[r("li",[e._v("调用全局函数 "),r("code",[e._v("initGlobalAPI()")]),e._v(" 初始化Vue全局api;\n"),r("ul",[r("li",[r("code",[e._v("Object.defineProperty(Vue, 'config', configDef)")]),e._v("：初始化"),r("code",[e._v("Vue.config")]),e._v("上的全局配置属性，例如：devtools、silent等属性;")]),r("li",[e._v("初始化"),r("code",[e._v("Vue.set")]),e._v("、"),r("code",[e._v("Vue.delete")]),e._v("、"),r("code",[e._v("Vue.nextTick")]),e._v("等方法;")]),r("li",[e._v("初始化"),r("code",[e._v("Vue.options")]),e._v("上的属性，例如："),r("code",[e._v("components")]),e._v("、"),r("code",[e._v("directives")]),e._v("、"),r("code",[e._v("filters")]),e._v("，然后"),r("code",[e._v("Vue.options._base = Vue")]),e._v("挂载"),r("code",[e._v("Vue")]),e._v("给"),r("code",[e._v("_base")]),e._v("属性，然后"),r("code",[e._v("extend(Vue.options.components, builtInComponents)")]),e._v("将"),r("code",[e._v("builtInComponents")]),e._v("中的组件"),r("code",[e._v("KeepAlive")]),e._v("初始化继承到"),r("code",[e._v("Vue.options.components")]),e._v("对象中;")]),r("li",[r("code",[e._v("initUse(Vue)")]),e._v("初始化"),r("code",[e._v("Vue.use")]),e._v("方法的功能;")]),r("li",[r("code",[e._v("initMixin(Vue)")]),e._v("初始化"),r("code",[e._v("Vue.mixin")]),e._v("方法的功能;")]),r("li",[r("code",[e._v("initExtend(Vue)")]),e._v("初始化"),r("code",[e._v("Vue.extend")]),e._v("方法的功能;")]),r("li",[r("code",[e._v("initAssetRegisters(Vue)")]),e._v("初始化"),r("code",[e._v("Vue.component")]),e._v("、"),r("code",[e._v("Vue.directive")]),e._v("、"),r("code",[e._v("Vue.filter")]),e._v("方法的功能;")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"new-vue-做了什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new-vue-做了什么","aria-hidden":"true"}},[this._v("#")]),this._v(" new Vue()做了什么")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ul",[r("li",[e._v("在"),r("code",[e._v("Vue")]),e._v("构造函数中通过"),r("code",[e._v("this._init(options)")]),e._v("初始化vue实例数据;\n"),r("ul",[r("li",[r("code",[e._v("initLifecycle(vm)")])]),r("li",[r("code",[e._v("initEvents(vm)")])]),r("li",[r("code",[e._v("initRender(vm)")])]),r("li",[r("code",[e._v("callHook(vm, 'beforeCreate')")]),e._v("触发生命周期回调;")]),r("li",[r("code",[e._v("initInjections(vm)")])]),r("li",[r("code",[e._v("initState(vm)")]),e._v("初始化实例的"),r("code",[e._v("props、methods、data、computed、watch")]),e._v("等属性;\n"),r("ul",[r("li",[r("code",[e._v("initProps(vm, opts.props)")]),e._v(";")]),r("li",[r("code",[e._v("initMethods(vm, opts.methods)")]),e._v(";")]),r("li",[r("code",[e._v("initData(vm)")]),e._v(";\n"),r("ul",[r("li",[e._v("遍历"),r("code",[e._v("vm._data")]),e._v("的属性，通过"),r("code",[e._v("proxy(vm, '_data', key)")]),e._v("代理"),r("code",[e._v("vm._data")]),e._v("上所有数据get和set，使直接操作vm上的属性可触发"),r("code",[e._v("vm._data")]),e._v("上同名属性的set和get达到挂载属性改变被监听的目的;")])])]),r("li",[r("code",[e._v("initComputed(vm, opts.computed)")]),e._v(";")]),r("li",[r("code",[e._v("initWatch(vm, opts.watch)")]),e._v(";")])])]),r("li",[r("code",[e._v("initProvide(vm)")])]),r("li",[r("code",[e._v("callHook(vm, 'created')")]),e._v("触发"),r("code",[e._v("created")]),e._v("回调;")]),r("li",[r("code",[e._v("vm.$mount(vm.$options.el)")]),e._v("挂载"),r("code",[e._v("el")]),e._v("元素，"),r("code",[e._v("$mount")]),e._v("的定义在源码 "),r("code",[e._v("entry-runtime-with-compiler.js")]),e._v("，此模式是带编译的版本;\n"),r("ul",[r("li",[r("p",[r("code",[e._v("const mount = Vue.prototype.$mount")]),e._v("先缓存"),r("code",[e._v("runtime")]),e._v("非编译版本的"),r("code",[e._v("mount")]),e._v("方法，留着后面用，然后重新在Vue原型上定义新的"),r("code",[e._v("$mount")]),e._v("方法；")])]),r("li",[r("p",[r("code",[e._v("el = el && query(el)")]),e._v("获取元素；")])]),r("li",[r("p",[r("code",[e._v("if (el === document.body || el === document.documentElement)")]),e._v("判断避免直接挂载在根元素上，因为后面会替换掉自身;")])]),r("li",[r("p",[r("code",[e._v("if (!options.render)")]),e._v("如果没有自定义"),r("code",[e._v("render")]),e._v("，则取"),r("code",[e._v("options.template")]),e._v("然后获取模板HTML，")])]),r("li",[r("p",[e._v("通过"),r("code",[e._v("compileToFunctions")]),e._v("方法将"),r("code",[e._v("template")]),e._v("编译成"),r("code",[e._v("render")]),e._v("函数;")])]),r("li",[r("p",[e._v("调用开始缓存的"),r("code",[e._v("mount")]),e._v("方法挂载"),r("code",[e._v("el")]),e._v("，"),r("code",[e._v("mount")]),e._v("中通过"),r("code",[e._v("mountComponent(this, el, hydrating)")]),e._v("挂载组件;")])]),r("li",[r("p",[e._v("在"),r("code",[e._v("mountComponent")]),e._v("中，通过"),r("code",[e._v("vm.$el = el")]),e._v("将"),r("code",[e._v("el")]),e._v("挂载到"),r("code",[e._v("$el")]),e._v("上;")])]),r("li",[r("p",[r("code",[e._v("callHook(vm, 'beforeMount')")]),e._v("触发生命周期回调;")])]),r("li",[r("p",[e._v("定义 "),r("code",[e._v("updateComponent")]),e._v("方法，此方法内通过调用"),r("code",[e._v("vm._render()")]),e._v("获取虚拟dom，然后通过"),r("code",[e._v("vm._update")]),e._v("方法传递虚拟dom来更新真实的dom，然后"),r("code",[e._v("new Watcher")]),e._v("监听视图更新，需要更新时调用"),r("code",[e._v("updateComponent")]),e._v(";")]),r("ul",[r("li",[r("code",[e._v("vm._render")]),e._v("中通过"),r("code",[e._v("vnode = render.call(vm._renderProxy, vm.$createElement)")]),e._v("获取虚拟dom节点，"),r("code",[e._v("vm.$createElement")]),e._v("是创建虚拟dom的方法;\n"),r("ul",[r("li",[r("code",[e._v("$createElement")]),e._v("中判断非原生标签，则通过"),r("code",[e._v("createComponent")]),e._v("方法创建组件的虚拟dom；")]),r("li",[r("code",[e._v("createComponent")]),e._v("中通过"),r("code",[e._v("baseCtor.extend(Ctor)")]),e._v("继承构造器（extend在源码"),r("code",[e._v("core\\global-api\\extend.js")]),e._v("中）；")])])]),r("li",[r("code",[e._v("vm._update")]),e._v("方法中通过"),r("code",[e._v("vm.__patch__")]),e._v("初始化或更新dom；"),r("code",[e._v("__patch__")]),e._v("在源码"),r("code",[e._v("runtime/index.js")]),e._v("中定义，")]),r("li",[r("code",[e._v("patch")]),e._v("方法（在源码"),r("code",[e._v("core\\vdom\\patch.js")]),e._v("）中通过"),r("code",[e._v("createElm")]),e._v("方法将虚拟dom转化为真实dom，"),r("code",[e._v("createElm")]),e._v("方法中通过"),r("code",[e._v("nodeOps.createElement")]),e._v("（内部通过"),r("code",[e._v("document.createElement")]),e._v("原生方法创建dom），然后通过"),r("code",[e._v("createChildren")]),e._v("方法递归子虚拟dom，最后通过"),r("code",[e._v("insert")]),e._v("方法插入dom；")])])]),r("li",[r("p",[r("code",[e._v("Watcher")]),e._v("中的"),r("code",[e._v("before")]),e._v("钩子中通过"),r("code",[e._v("callHook(vm, 'beforeUpdate')")]),e._v("触发生命周期函数;")])]),r("li",[r("p",[r("code",[e._v("callHook(vm, 'mounted')")]),e._v("触发生命周期回调，最后返回vue实例;")])])])])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"虚拟dom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom","aria-hidden":"true"}},[this._v("#")]),this._v(" 虚拟DOM")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("产生原生：js中操作dom效率低下，因为浏览器所构建的dom设计非常复杂，整个dom树体系庞大，频繁操作 dom 影响性能；前端主要任务就是维护状态和更新视图，必定会需要大量的操作dom，所以很容易降低渲染效率;")]),t("li",[this._v("核心思想：提供一种方便的工具，保证最小化的 dom 操作，提高视图渲染效率;")]),t("li",[this._v("核心实现：JS对象操作比 dom 操作效率快，所以对 dom 的改变，首先并不会真正的操作实际 dom，而是会通过虚拟dom（即模拟dom结构的js对象）进行属性对比后确认真正改变的属性，再对真实的 dom 进行操作;")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"bug"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bug","aria-hidden":"true"}},[this._v("#")]),this._v(" bug")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"vuex不兼容ie-例如：promise”未定义、或vuex报错vuex-requires-a-promise-polyfill-in-this-browser"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vuex不兼容ie-例如：promise”未定义、或vuex报错vuex-requires-a-promise-polyfill-in-this-browser","aria-hidden":"true"}},[this._v("#")]),this._v(" vuex不兼容IE(例如：Promise”未定义、或vuex报错vuex requires a Promise polyfill in this browser)")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("在代码执行之前，引入 babel-polyfill;")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"属性赋值对视图渲染无效"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性赋值对视图渲染无效","aria-hidden":"true"}},[this._v("#")]),this._v(" 属性赋值对视图渲染无效")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("初始化data时未追加，可通过"),t("code",[this._v("Vue.set")]),this._v("或"),t("code",[this._v("this.$set")]),this._v("方法修改数据避免；")]),t("li",[this._v("子组件不规范（未通过sync修饰符）的操作父组件通过 props 传递的数据，应尽量避免子组件过多操作props数据;")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"error-in-nexttick-invalidcharactererror-failed-to-execute-setattribute-on-element-is-not-a-valid-attribute-name"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#error-in-nexttick-invalidcharactererror-failed-to-execute-setattribute-on-element-is-not-a-valid-attribute-name","aria-hidden":"true"}},[this._v("#")]),this._v(" Error in nextTick: \"InvalidCharacterError: Failed to execute 'setAttribute' on 'Element': '}' is not a valid attribute name.\"")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("类似这种错误，一般是由于html模板中，自已在元素属性上加了vue无法识别的属性名，比如上面的报错中是不识别 '}' 说明模板中有误写了 '}' 到属性中;")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"cannot-read-property-withtask-of-undefined："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cannot-read-property-withtask-of-undefined：","aria-hidden":"true"}},[this._v("#")]),this._v(" Cannot read property '_withTask' of undefined：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("常因为vue template中绑定的数据或方法，没有在实例中的对应属性中写入而产生;")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"no-parser-and-no-file-path-given-couldn-t-infer-a-parser"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#no-parser-and-no-file-path-given-couldn-t-infer-a-parser","aria-hidden":"true"}},[this._v("#")]),this._v(" No parser and no file path given, couldn't infer a parser")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v('由于 prettier 模块版本过高导致，prettier 是 "vue-loader" 的依赖，把 vue-loader 降级成 "12.2.2" 可解决;')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"新的-vue-cli-项目中-webpack-dev-server-高版本babel编译不了导致ie报错："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新的-vue-cli-项目中-webpack-dev-server-高版本babel编译不了导致ie报错：","aria-hidden":"true"}},[this._v("#")]),this._v(" 新的 vue-cli 项目中 webpack-dev-server 高版本babel编译不了导致IE报错：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v('降版本 "webpack-dev-server": "2.6.1";')])])}],!1,null,null,null);t.default=n.exports}}]);